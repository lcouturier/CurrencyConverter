<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics.Contracts;
using System.CodeDom.Compiler;

namespace CurrencyConverter.Core
{
	[GeneratedCode("T4CodeGenerator", "1.0.0.0")] 
    public static class FunctionForwardTransformExtensions
    {	
		[SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static TResult Forward<T1, TResult>(this T1 value, Func<T1, TResult> operation)
        {
			Contract.Requires<ArgumentNullException>(operation != null);            

            return operation(value);
        }	    

	<# 
	for(var i = 2; i <= 10; i++)
	{ 		
        var t1 = String.Join("", Enumerable.Range(1, i).Select(x => "T" + x + ", "));		
		var t3 = Enumerable.Range(2, i - 1).Select(x => string.Format("T{0} x{0}",x)).Aggregate((acc,x) => String.Concat(acc,", ",x));
        var xarg = String.Format("{0}", String.Join(", ", Enumerable.Range(2, i - 1).Select(x => "x" + x)));
	#>

	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static TResult Forward<<#= t1 #>TResult>(this T1 value, Func<<#= t1 #>TResult> operation, <#= t3 #>)
        {
			Contract.Requires<ArgumentNullException>(operation != null);            

            return operation(value,<#= xarg #>);
        }

	<# } #>
}
}