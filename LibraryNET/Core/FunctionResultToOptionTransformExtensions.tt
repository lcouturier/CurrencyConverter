<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics.Contracts;
using System.CodeDom.Compiler;

namespace LibraryNET.Core
{
	[GeneratedCode("T4CodeGenerator", "1.0.0.0")] 
    public static class FunctionResultToOptionTransformExtensions
    {	
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static Func<Option<TResult>> ReturnOption<TResult>(this Func<TResult> func)
        {
			Contract.Requires<ArgumentNullException>(func != null);
            Contract.Ensures(Contract.Result<Func<Option<TResult>>>() != null);

            return () => Option.Of(func());
        }

	<# 
	for(var i = 1; i <= 10; i++)
	{ 
        var t = String.Join("", Enumerable.Range(1, i).Select(x => "T" + x + ", "));
        var xarg = String.Format("({0})", String.Join(", ", Enumerable.Range(1, i).Select(x => "x" + x)));
	#>

	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static Func<<#= t #>Option<TResult>> ReturnOption<<#= t #>TResult>(this Func<<#= t #>TResult> func)
        {
			Contract.Requires<ArgumentNullException>(func != null);
            Contract.Ensures(Contract.Result<Func<<#= t #>Option<TResult>>>() != null);

            return <#= xarg #> => Option.Of(func<#= xarg #>);
        }

	<# } #>
}

}