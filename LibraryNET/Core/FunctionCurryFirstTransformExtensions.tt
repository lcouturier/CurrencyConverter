<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics.Contracts;
using System.CodeDom.Compiler;

namespace LibraryNET.Core
{
    [GeneratedCode("T4CodeGenerator", "1.0.0.0")] 
    public static class FunctionCurryFirstTransformExtensions
    {
	    [Obsolete("préférer l'utilisation de Curry dans le Namespace Transform", false)]
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static Func<TResult> CurryFirst<T1,TResult>(this Func<T1, TResult> selector, T1 value)
        {
            Contract.Requires<ArgumentNullException>(selector != null);
            Contract.Ensures(Contract.Result<Func<TResult>>() != null);

            return () => selector(value);
        }

	<# 
	for(var i = 1; i <= 10; i++)
	{ 
		var tin = String.Join("", Enumerable.Range(1, i + 1).Select(x => "T" + x + ", "));
        var t = String.Join("", Enumerable.Range(2, i).Select(x => "T" + x + ", "));
        var xarg1 = String.Join(", ", Enumerable.Range(2, i).Select(x => "x" + x));
        var xarg2 = String.Join(", ", Enumerable.Range(2, i).Select(x => "x" + x));
	#>
	[Obsolete("préférer l'utilisation de Curry dans le Namespace Transform", false)]
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static Func<<#= t #>TResult> CurryFirst<T1, <#= t #>TResult>(this Func<<#= tin #>TResult> selector, T1 value)
        {
            Contract.Requires<ArgumentNullException>(selector != null);
            Contract.Ensures(Contract.Result<Func<<#= t #>TResult>>() != null);

            return (<#= xarg1 #>) => selector(value, <#= xarg2 #>);
        }

	<# } #>	

	<# 
	for(var i = 1; i <= 10; i++)
	{ 
		var tin = String.Join("", Enumerable.Range(1, i + 1).Select(x => "T" + x + ", "));
        var t = String.Join("", Enumerable.Range(2, i).Select(x => "T" + x + ", "));
		var tout = String.Join("", Enumerable.Range(1, i).Select(x => "T" + x + ", "));
		var p = string.Concat("T" + (i + 1));
        var xarg1 = String.Join(", ", Enumerable.Range(1, i).Select(x => "x" + x));
        var xarg2 = String.Join(", ", Enumerable.Range(1, i).Select(x => "x" + x));
	#>	
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static Func<<#= tout #>TResult> CurryLast<T1, <#= t #>TResult>(this Func<<#= tin #>TResult> selector, <#= p #> value)
        {
            Contract.Requires<ArgumentNullException>(selector != null);
            Contract.Ensures(Contract.Result<Func<<#= tout #>TResult>>() != null);

            return (<#= xarg1 #>) => selector(<#= xarg2 #>, value);
        }

	<# } #>	
	    
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static Func<TResult> Curry<T1,TResult>(this Func<T1, TResult> selector, T1 value)
        {
            Contract.Requires<ArgumentNullException>(selector != null);
            Contract.Ensures(Contract.Result<Func<TResult>>() != null);

            return () => selector(value);
        }

	<# 
	for(var i = 1; i <= 10; i++)
	{ 
		var tin = String.Join("", Enumerable.Range(1, i + 1).Select(x => "T" + x + ", "));
        var t = String.Join("", Enumerable.Range(2, i).Select(x => "T" + x + ", "));
        var xarg1 = String.Join(", ", Enumerable.Range(2, i).Select(x => "x" + x));
        var xarg2 = String.Join(", ", Enumerable.Range(2, i).Select(x => "x" + x));
	#>
    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
        [SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static Func<<#= t #>TResult> Curry<T1, <#= t #>TResult>(this Func<<#= tin #>TResult> selector, T1 value)
        {
            Contract.Requires<ArgumentNullException>(selector != null);
            Contract.Ensures(Contract.Result<Func<<#= t #>TResult>>() != null);

            return (<#= xarg1 #>) => selector(value, <#= xarg2 #>);
        }

	<# } #>	
}

}