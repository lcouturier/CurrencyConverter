<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics.Contracts;
using System.Diagnostics;
using System.CodeDom.Compiler;

namespace CurrencyConverter.Library.Core
{
    /// <summary>
    /// Méthodes d'extensions qui implémente un gestionnaire d'exception et qui retourne un <see cref="Option.None"/> en cas d'erreur
    /// </summary>
	[GeneratedCode("T4CodeGenerator", "1.0.0.0")] 
    public static class FunctionResultNoneOnExceptionTransformExtensions
    {	
		[SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
	    public static Func<Option<TResult>> OnExceptionNone<TResult>(this Func<Option<TResult>> func)
        {
            Contract.Requires<ArgumentNullException>(func != null);
            Contract.Ensures(Contract.Result<Func<Option<TResult>>>() != null);
            
            return () =>
            {
                try
                {
                    return func();
                }
                catch (Exception e)
                {
                    Trace.TraceError(e.Message, e);
                    return Option.None;
                }
            };
        }

	    [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
	    public static Func<T1, Option<TResult>> OnExceptionNone<T1, TResult>(this Func<T1, Option<TResult>> func)
        {
            Contract.Requires<ArgumentNullException>(func != null);
            Contract.Ensures(Contract.Result<Func<T1, Option<TResult>>>() != null);
            
            return args =>
            {
                try
                {
                    return func(args);
                }
                catch (Exception e)
                {
                    Trace.TraceError(e.Message, e);
                    return Option.None;
                }
            };
        }

	<# 
	for(var i = 2; i < 10; i++)
	{ 
        var t = String.Join("", Enumerable.Range(1, i).Select(x => "T" + x + ", "));
        var xarg = String.Format("({0})", String.Join(", ", Enumerable.Range(1, i).Select(x => "x" + x)));
		var xarg2 = String.Join("", Enumerable.Range(1, i - 1).Select(x => String.Format("(x{0})", x)));
		var y = "x" + i;
	#>

	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
	    [SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static Func<<#= t #>Option<TResult>> OnExceptionNone<<#= t #>TResult>(this Func<<#= t #>Option<TResult>> func)
        {
			Contract.Requires<ArgumentNullException>(func != null);
            Contract.Ensures(Contract.Result<Func<<#= t #>Option<TResult>>>() != null);

            return <#= xarg #> => func.Currying()<#= xarg2 #>.OnExceptionNone()(<#= y #>);
        }

	<# } #>
}

}