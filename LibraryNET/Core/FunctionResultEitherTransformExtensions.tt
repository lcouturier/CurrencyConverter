<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraryNET.Core
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.Diagnostics.Contracts;
    using System.Diagnostics;
	using System.CodeDom.Compiler;

	[GeneratedCode("T4CodeGenerator", "1.0.0.0")] 
    public static class FunctionResultEitherTransformExtensions
    {	
		[SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
		public static Func<Either<TResult>> OnExceptionEither<TResult>(this Func<TResult> func)
        {
            Contract.Requires<ArgumentNullException>(func != null);

            return () =>
            {
                try
                {
                    return Either.Success(func());
                }
                catch (Exception e)
                {
                    Trace.TraceError(e.Message, e);
                    return Either.Error<TResult>(e);
                }
            };
        }
		
	    /// <summary>
        /// Décoration d'une fonction par un gestionnaire d'exception qui retourn un <see cref="Either{TValue}"/>.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="TResult">Type encapsuler par un <see cref="Either"/>.</typeparam>
        /// <param name="func">Fonction à décorer par un gestionnaire d'exception qui retourn un <see cref="Either{TValue}"/> dans tous les cas.</param>
        /// <returns>Retourne une fonction qui renvoie un <see cref="Either"/></returns>
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static Func<T, Either<TResult>> OnExceptionEither<T, TResult>(this Func<T, TResult> func)
        {
            Contract.Requires<ArgumentNullException>(func != null);
            Contract.Ensures(Contract.Result<Func<T, Either<TResult>>>() != null);

            return args =>
            {
                try
                {
                    return Either.Success(func(args));
                }
                catch (Exception e)
                {
                    Trace.TraceError(e.Message, e);
                    return Either.Error<TResult>(e);
                }
            };
        }

	<# 
	for(var i = 2; i < 10; i++)
	{ 
        var t = String.Join("", Enumerable.Range(1, i).Select(x => "T" + x + ", "));
        var xarg = String.Format("({0})", String.Join(", ", Enumerable.Range(1, i).Select(x => "x" + x)));
		var xarg2 = String.Join("", Enumerable.Range(1, i - 1).Select(x => String.Format("(x{0})", x)));
		var y = "x" + i;		
		var typeparams = String.Join(Environment.NewLine, Enumerable.Range(1, i).Select(x => String.Format("/// <typeparam name=\"T{0}\">The type of the {0}.</typeparam>", x)));
	#>
	/// <summary>
        /// Décoration d'une fonction par un gestionnaire d'exception qui retourn un <see cref="Either{TValue}"/>.
        /// </summary>                
		<#= typeparams #>
        /// <typeparam name="TResult">Type encapsuler par un <see cref="Either"/>.</typeparam>
        /// <param name="func">Fonction à décorer par un gestionnaire d'exception qui retourn un <see cref="Either{TValue}"/> dans tous les cas.</param>
        /// <returns>Retourne une fonction qui renvoie un <see cref="Either"/></returns>
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static Func<<#= t #>Either<TResult>> OnExceptionEither<<#= t #>TResult>(this Func<<#= t #>TResult> func)
        {
			Contract.Requires<ArgumentNullException>(func != null);
            Contract.Ensures(Contract.Result<Func<<#= t #>Either<TResult>>>() != null);

            return <#= xarg #> => func.Currying()<#= xarg2 #>.OnExceptionEither()(<#= y #>);
        }

	<# } #>
}

}