//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Diagnostics.CodeAnalysis;
using System.Diagnostics.Contracts;
using System.CodeDom.Compiler;

namespace LibraryNET.Core
{
	[GeneratedCode("T4CodeGenerator", "1.0.0.0")] 
    public static class FunctionForwardTransformExtensions
    {	
		[SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static TResult Forward<T1, TResult>(this T1 value, Func<T1, TResult> operation)
        {
			Contract.Requires<ArgumentNullException>(operation != null);            

            return operation(value);
        }	    

	
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static TResult Forward<T1, T2, TResult>(this T1 value, Func<T1, T2, TResult> operation, T2 x2)
        {
			Contract.Requires<ArgumentNullException>(operation != null);            

            return operation(value,x2);
        }

	
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static TResult Forward<T1, T2, T3, TResult>(this T1 value, Func<T1, T2, T3, TResult> operation, T2 x2, T3 x3)
        {
			Contract.Requires<ArgumentNullException>(operation != null);            

            return operation(value,x2, x3);
        }

	
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static TResult Forward<T1, T2, T3, T4, TResult>(this T1 value, Func<T1, T2, T3, T4, TResult> operation, T2 x2, T3 x3, T4 x4)
        {
			Contract.Requires<ArgumentNullException>(operation != null);            

            return operation(value,x2, x3, x4);
        }

	
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static TResult Forward<T1, T2, T3, T4, T5, TResult>(this T1 value, Func<T1, T2, T3, T4, T5, TResult> operation, T2 x2, T3 x3, T4 x4, T5 x5)
        {
			Contract.Requires<ArgumentNullException>(operation != null);            

            return operation(value,x2, x3, x4, x5);
        }

	
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static TResult Forward<T1, T2, T3, T4, T5, T6, TResult>(this T1 value, Func<T1, T2, T3, T4, T5, T6, TResult> operation, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6)
        {
			Contract.Requires<ArgumentNullException>(operation != null);            

            return operation(value,x2, x3, x4, x5, x6);
        }

	
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static TResult Forward<T1, T2, T3, T4, T5, T6, T7, TResult>(this T1 value, Func<T1, T2, T3, T4, T5, T6, T7, TResult> operation, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6, T7 x7)
        {
			Contract.Requires<ArgumentNullException>(operation != null);            

            return operation(value,x2, x3, x4, x5, x6, x7);
        }

	
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static TResult Forward<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(this T1 value, Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> operation, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6, T7 x7, T8 x8)
        {
			Contract.Requires<ArgumentNullException>(operation != null);            

            return operation(value,x2, x3, x4, x5, x6, x7, x8);
        }

	
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static TResult Forward<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(this T1 value, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> operation, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6, T7 x7, T8 x8, T9 x9)
        {
			Contract.Requires<ArgumentNullException>(operation != null);            

            return operation(value,x2, x3, x4, x5, x6, x7, x8, x9);
        }

	
	    [SuppressMessage("Microsoft.Design", "CA1006:DoNotNestGenericTypesInMemberSignatures")]
		[SuppressMessage("Microsoft.Design", "CA1062:Valider les arguments de méthodes publiques", Justification = "Géré par Code Contract")]
        public static TResult Forward<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(this T1 value, Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> operation, T2 x2, T3 x3, T4 x4, T5 x5, T6 x6, T7 x7, T8 x8, T9 x9, T10 x10)
        {
			Contract.Requires<ArgumentNullException>(operation != null);            

            return operation(value,x2, x3, x4, x5, x6, x7, x8, x9, x10);
        }

	}
}